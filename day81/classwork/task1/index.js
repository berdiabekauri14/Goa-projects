// 1) შექმენით მაგალითები var, let, const ახსენით მათ შორის სრული განსხვავება, აგრეთვე ახსენით რა არის გლობალური, ლოკალური(ანუ ფუნქციის) და ბლოკის ფარგლები, რა განსხვავებაა მათ შორის, აგრეთვე დაწერეთ მაგალითუი სადაც მუშაობს ლექსიკური ფარგლები და ახსენით რა არის ის

// var, let და const-ის შორის განსხვავება

// let
// let keyword ის გამოყენებით ჩვენ ვქნით ცვლადს რომელიც მის დეკლარაციის მერე ჩვენ გვინდა რომ შევცვალოთ

let name = "Bekauri"; // შევქმენით ცვლადი let keyword-ის გამოყენებით რადგან ეხლა მინდა რომ შევცვალო
name = "Berdia"; // შევცვალე ჩემი ცვლადის მნიშნელობა
console.log(name); // გამოიტანს Berdia-ს

// const
// const keyword ის გამოყენებით ჩვენ ვქნით ცვლადს რომელიც მის დეკლარაციის მერე არ გვინდა რომ შევცვალოთ, const keyword ით როცა ქმნი ცვლადს ეს იმას ნიშნავს რომ შენ ქმნი კონსტანტას

const lastName = "Bekauri"; // შევქმენით კონსტანტა
lastName = "berdia"; // ვცდილობთ რომ შევცვალოთ კონსტანტის ნიშნელობა
console.log(lastName); // გამოიტანს ერორს

// var
// var keyword ის გამოყენებით ჩვენ ვქმნით ჩვეულებრივ ცვლადს
var fname = "berdia";
console.log(fname);

// global scope, local scope და block scope-ის შორის განსხვავება

// global scope
// global scope ით ჩვენ ვწდებით ყველა ცვლადს რომელიც არის გლობალური ანუ იგივეა როგორც public ცვლადი

for (var i = 0; i < 5; i++) {

}

console.log(i); // გამოიტანს 5-ს

// local scope
// local scope-ის გამოყენება შეგვიძლია მარტო ფუნქციებზე რომ მივწდეთ ჩვენს ცვლადს

function myFunc() {
    const variable = "berdia";
}

console.log(variable) // გამოიტანს ერორს

// block scope
// ეს სფერო ზღუდავს ცვლადს, რომელიც გამოცხადებულია კონკრეტული ბლოკის შიგნით, ბლოკის გარედან წვდომას. let & const საკვანძო სიტყვა აადვილებს ცვლადების ბლოკს. იმ კონკრეტული ბლოკის ცვლადებზე წვდომისთვის, ჩვენ უნდა შევქმნათ მისთვის ობიექტი.

if (condition) {
    let secondVar = "ber";
}

console.log(secondVar)